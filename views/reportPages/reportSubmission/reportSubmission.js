////views/reportPages/reportSubmission/reportSubmission.js
const dailyTasks = [
  "Oring ƒë·∫ßu ƒë·ª±c, c√°i c√≥ b·ªã ƒë·ª©t ho·∫∑c tr·∫≠t kh·ªèi r√£nh kh√¥ng?",
  "C√≥ b·ªã k·∫πt v√≤ng bi l√∫c xoay kh√¥ng?",
  "Ch·ªâ s·ªë ƒë·ªìng h·ªì tr·ª£ n·∫°p v√† ƒë·ªìng h·ªì b∆°m c√≥ gi·ªëng nhau kh√¥ng?",
  "C√°c ch·ªâ s·ªë ƒë·ªìng h·ªì c√≥ v·∫≠n t·ªëc ƒëo gi·ªëng nhau kh√¥ng?",
  "L√∫c v·∫≠n h√†nh √°p su·∫•t c·∫•p 1 v√† c·∫•p 2 c√≥ gi·ªØ ƒë∆∞·ª£c ·ªïn ƒë·ªãnh kh√¥ng?",
  "ƒêi·ªán tr·ªü ƒë·ªët c√≥ b·∫≠t t·∫Øt theo y√™u c·∫ßu kh√¥ng?",
  "Nhi·ªát ƒë·ªô n∆∞·ªõc c√≥ n·∫±m trong kho·∫£ng 55-75 ƒë·ªô kh√¥ng?",
  "Nhi·ªát ƒë·ªô kh√≠ c√≥ n·∫±m trong kho·∫£ng 10-40 ƒë·ªô kh√¥ng?",
];

const weeklyTasks = [
  "To√†n h·ªá th·ªëng c√≥ ƒëi·ªÉm n√†o b·ªã x·ªâ kh√¥ng? (Th·ª≠ x√¨)",
  "X·∫£ d·∫ßu l·ªçc th·∫•p √°p, cao √°p theo ƒë·ªùi d·∫ßu c√≥ c·∫∑n b·∫©n kh√¥ng?",
  "Van 1 chi·ªÅu, van tay c√≥ b·ªã l√≤n kh√≠ hay kh√¥ng?",
  "ƒê·ªìng h·ªì tr·ª• n·∫°p c√≤n d·∫ßu hay kh√¥ng, kim c√≥ g√£y kh√¥ng?",
  "C√°c d√¢y l·∫•y t√≠nh hi·ªáu nhi·ªát ƒë·ªô, √°p su·∫•t, xung c·ªßa ƒêHLL c√≥ b·ªã ƒë·ª©t g√£y, ch·∫°m ch·∫≠p, v√¥ n∆∞·ªõc m∆∞a kh√¥ng?",
];

let currentReportType = "daily";

// Initialize the page
document.addEventListener("DOMContentLoaded", function () {
  initializePage();
  setupEventListeners();
  updateProgress();
});

function initializePage() {
  // Set current date and time
  const now = new Date();
  const dateTimeString = `${now.getHours().toString().padStart(2, "0")}h${now
    .getMinutes()
    .toString()
    .padStart(2, "0")}, ng√†y ${now.getDate()} th√°ng ${
    now.getMonth() + 1
  } nƒÉm ${now.getFullYear()}`;

  document.getElementById(
    "dailyDate"
  ).textContent = `Ng√†y, gi·ªù hi·ªán t·∫°i: ${dateTimeString}`;
  document.getElementById(
    "weeklyDate"
  ).textContent = `Ng√†y, gi·ªù hi·ªán t·∫°i: ${dateTimeString}`;

  // Set default inspection time to current time
  const currentTime = `${now.getHours().toString().padStart(2, "0")}:${now
    .getMinutes()
    .toString()
    .padStart(2, "0")}`;
  document.getElementById("inspectionTime").value = currentTime;

  // Get inspector info and populate tasks
  populateTasks("dailyTasks", dailyTasks);
  populateTasks("weeklyTasks", weeklyTasks);
}

function setupEventListeners() {
  // Report type toggle
  document.querySelectorAll(".toggle-option").forEach((option) => {
    option.addEventListener("click", function () {
      const type = this.dataset.type;
      switchReportType(type);
    });
  });

  // Submit report
  document
    .getElementById("submitReport")
    .addEventListener("click", submitReport);

  // Progress tracking
  document.addEventListener("change", updateProgress);
}

function switchReportType(type) {
  currentReportType = type;
  document.getElementById("reportType").value = type;

  // Update toggle appearance
  document.querySelectorAll(".toggle-option").forEach((option) => {
    option.classList.toggle("active", option.dataset.type === type);
  });

  // Show/hide report forms
  document
    .getElementById("dailyReport")
    .classList.toggle("active", type === "daily");
  document
    .getElementById("weeklyReport")
    .classList.toggle("active", type === "weekly");

  updateProgress();
}

function updateProgress() {
  const totalTasks =
    currentReportType === "daily" ? dailyTasks.length : weeklyTasks.length;
  const completedTasks = document.querySelectorAll(
    `#${currentReportType}Tasks input[type="radio"]:checked`
  ).length;
  const progress = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;

  document.getElementById("progressBar").style.width = `${progress}%`;
}

function populateTasks(elementId, tasks) {
  const tbody = document.getElementById(elementId);
  tbody.innerHTML = "";

  tasks.forEach((task, index) => {
    const row = document.createElement("tr");

    // Task cell
    const taskCell = document.createElement("td");
    taskCell.className = "task-cell";
    taskCell.textContent = `${index + 1}. ${task}`;
    row.appendChild(taskCell);

    // Yes radio cell
    const yesCell = document.createElement("td");
    yesCell.className = "radio-cell";
    const yesInput = document.createElement("input");
    yesInput.type = "radio";
    yesInput.className = "radio-input";
    yesInput.name = `task_${index}_${elementId}`;
    yesInput.value = "yes";
    yesCell.appendChild(yesInput);
    row.appendChild(yesCell);

    // Yes notes cell
    const yesNotesCell = document.createElement("td");
    yesNotesCell.className = "notes-cell";
    const yesNotesInput = document.createElement("input");
    yesNotesInput.type = "text";
    yesNotesInput.className = "notes-input";
    yesNotesInput.placeholder = "Ghi ch√∫...";
    yesNotesInput.dataset.task = task;
    yesNotesInput.dataset.status = "yes";
    yesNotesCell.appendChild(yesNotesInput);
    row.appendChild(yesNotesCell);

    // No radio cell
    const noCell = document.createElement("td");
    noCell.className = "radio-cell";
    const noInput = document.createElement("input");
    noInput.type = "radio";
    noInput.className = "radio-input";
    noInput.name = `task_${index}_${elementId}`;
    noInput.value = "no";
    noCell.appendChild(noInput);
    row.appendChild(noCell);

    // No notes cell
    const noNotesCell = document.createElement("td");
    noNotesCell.className = "notes-cell";
    const noNotesInput = document.createElement("input");
    noNotesInput.type = "text";
    noNotesInput.className = "notes-input";
    noNotesInput.placeholder = "Ghi ch√∫...";
    noNotesInput.dataset.task = task;
    noNotesInput.dataset.status = "no";
    noNotesCell.appendChild(noNotesInput);
    row.appendChild(noNotesCell);

    tbody.appendChild(row);
  });
}

function showAlert(message, type = "success") {
  const alertBox = document.getElementById("alertBox");
  alertBox.textContent = message;
  alertBox.className = `alert ${type} show`;

  setTimeout(() => {
    alertBox.classList.remove("show");
  }, 5000);
}

function setLoading(loading) {
  const button = document.getElementById("submitReport");
  const spinner = document.getElementById("loadingSpinner");
  const text = document.getElementById("submitText");

  if (loading) {
    button.disabled = true;
    spinner.style.display = "block";
    text.textContent = "ƒêang g·ª≠i...";
  } else {
    button.disabled = false;
    spinner.style.display = "none";
    text.textContent = "üì§ G·ª≠i b√°o c√°o / Submit Report";
  }
}

async function submitReport() {
  const inspectionTime = document.getElementById("inspectionTime").value;

  if (!inspectionTime) {
    showAlert("Vui l√≤ng nh·∫≠p gi·ªù ki·ªÉm tra", "error");
    return;
  }

  // Collect task data
  const items = [];
  const taskElements = document.querySelectorAll(
    `#${currentReportType}Tasks input[type="text"]`
  );

  taskElements.forEach((input) => {
    const task = input.dataset.task;
    const status = input.dataset.status;
    const radioName = input
      .closest("tr")
      .querySelector('input[type="radio"]').name;
    const radio = document.querySelector(
      `input[name="${radioName}"][value="${status}"]`
    );

    if (radio && radio.checked) {
      items.push({
        task,
        status: status === "yes",
        notes: input.value,
      });
    }
  });

  if (items.length === 0) {
    showAlert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt c√¥ng vi·ªác", "error");
    return;
  }

  setLoading(true);

  try {
    const response = await fetch("/reportSubmission", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      credentials: "include",
      body: JSON.stringify({
        reportType: currentReportType,
        inspectionTime,
        items,
      }),
    });

    const data = await response.json();

    if (response.ok) {
      showAlert("B√°o c√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!", "success");
      // Reset form
      document
        .querySelectorAll('input[type="radio"]')
        .forEach((radio) => (radio.checked = false));
      document
        .querySelectorAll('input[type="text"]')
        .forEach((input) => (input.value = ""));
      updateProgress();
    } else {
      throw new Error(data.error || "L·ªói khi g·ª≠i b√°o c√°o");
    }
  } catch (error) {
    showAlert(error.message, "error");
    console.error("Error:", error);
  } finally {
    setLoading(false);
  }
}
